{"version":3,"sources":["components/LazyComponent/index.js","router/index.tsx","serviceWorker.ts","index.tsx"],"names":["asyncComponent","loadComponent","args","state","Component","hasLoadedComponent","bind","console","log","this","then","module","default","setState","catch","error","props","React","Layout","Home","Uidoc","Index","Recipe","EditRecipe","Function","Resume","ResumePreview","HRouter","path","pathName","name","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oSAEaA,EAAiB,SAACC,GAAD,yDAE1B,aAAsB,IAAD,iDAANC,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KACJC,MAAQ,CACXC,UAAW,MAEb,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBALP,EAFK,iEASJ,IAAD,OACnBC,QAAQC,IAAIP,EAAe,iBAEvBQ,KAAKJ,sBACTJ,IAEGS,MAAK,SAACC,GAAD,OAAaA,EAAOC,QAAUD,EAAOC,QAAUD,KACpDD,MAAK,SAACN,GACL,EAAKS,SAAS,CACZT,iBAGHU,OAAM,SAAAC,GAIL,MAFAR,QAAQQ,MAAM,6CAERA,OAzBc,2CA6BxB,OAAgC,OAAzBN,KAAKN,MAAMC,YA7BM,+BA+BhB,IACAA,EAAcK,KAAKN,MAAnBC,UACR,OAAOA,EAAY,kBAACA,EAAcK,KAAKO,OAAsB,gDAjCrC,GACCC,IAAMb,YCa/Bc,EAASlB,GAAe,kBAAI,iCAC5BmB,EAAOnB,GAAe,kBAAI,8DAC1BoB,EAAQpB,GAAe,kBAAI,+DAG3BqB,GAFOrB,GAAe,kBAAI,8DACnBA,GAAe,kBAAI,8DAClBA,GAAe,kBAAI,wDAC3BsB,EAAStB,GAAe,kBAAI,wDAC5BuB,EAAavB,GAAe,kBAAI,wDAChCwB,EAAWxB,GAAe,kBAAI,uDAC9ByB,EAASzB,GAAe,kBAAI,wDAC5B0B,EAAgB1B,GAAe,kBAAI,wDAoB1B2B,EAjBe,SAACX,GAC3B,OACA,kBAAC,IAAD,KACM,kBAACE,EAAD,KACC,kBAAC,IAAD,CAAOU,KAAK,IAAIC,SAAS,QAAQC,KAAK,QAAQC,OAAK,EAACC,UAAWX,IAC9D,kBAAC,IAAD,CAAOO,KAAK,QAAQI,UAAWb,IAC/B,kBAAC,IAAD,CAAOS,KAAK,SAASI,UAAWZ,IAChC,kBAAC,IAAD,CAAOQ,KAAK,UAAWI,UAAWV,IAClC,kBAAC,IAAD,CAAOM,KAAK,cAAeI,UAAWT,IACtC,kBAAC,IAAD,CAAOK,KAAK,YAAYI,UAAWR,IACnC,kBAAC,IAAD,CAAOI,KAAK,UAAUG,OAAK,EAACC,UAAWP,IACvC,kBAAC,IAAD,CAAOG,KAAK,kBAAkBI,UAAWN,OC5BjCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAC,GACLR,QAAQQ,MAAMA,EAAMgC,c","file":"static/js/main.fa69efd9.chunk.js","sourcesContent":["import React from 'react';\n\nexport const asyncComponent = (loadComponent) =>\n  class AsyncComponent extends React.Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        Component: null,\n      };\n      this.hasLoadedComponent = this.hasLoadedComponent.bind(this);\n    }\n    componentWillMount() {\n      console.log(loadComponent, 'loadComponent');\n      // 判断是不是已经加载过了\n      if (this.hasLoadedComponent()) return;\n      loadComponent()\n        // 兼容具名和default两种export写法。\n        .then((module) => (module.default ? module.default : module))\n        .then((Component) => {\n          this.setState({\n            Component,\n          });\n        })\n        .catch(error=>{\n          /*eslint-disable*/\n          console.error('cannot load Component in <AsyncComponent>');\n          /*eslint-enable*/\n          throw error;\n        })\n    }\n    hasLoadedComponent() {\n      return this.state.Component !== null;\n    }\n    render() {\n      const { Component } = this.state;\n      return Component ? <Component {...this.props}></Component> : <span>loading...</span>;\n    }\n  };","\nimport React from 'react'\nimport { HashRouter as Router , Route, Link } from \"react-router-dom\";\nimport {asyncComponent} from '../components/LazyComponent'\n// import Layout from '../components/Layout'\n// import Home from '../page/home';\n// import Uidoc from '../page/uidoc';\n// import Doc1 from '../page/uidoc/doc1';\n// import Doc2 from '../page/uidoc/doc2';\n// import Index from '../page/index';\n// import Recipe from '../page/recipe/manager-list';\n// import EditRecipe from '../page/recipe/edit-recipe';\n// import Function from '../page/function';\n// import Resume from '../page/resume';\n// import ResumePreview from '../page/resume/preview';\n\nconst Layout = asyncComponent(()=>import(/* webpackChunkName: 'Layout' */ '../components/Layout'))\nconst Home = asyncComponent(()=>import(/* webpackChunkName: 'home' */ '../page/home'))\nconst Uidoc = asyncComponent(()=>import(/* webpackChunkName: 'uidoc' */ '../page/uidoc'))\nconst Doc1 = asyncComponent(()=>import(/* webpackChunkName: 'doc1' */ '../page/uidoc/doc1'))\nconst Doc2 = asyncComponent(()=>import(/* webpackChunkName: 'doc2' */ '../page/uidoc/doc2'))\nconst Index = asyncComponent(()=>import(/* webpackChunkName: 'index' */ '../page/index'))\nconst Recipe = asyncComponent(()=>import(/* webpackChunkName: 'manager-list' */ '../page/recipe/manager-list'))\nconst EditRecipe = asyncComponent(()=>import(/* webpackChunkName: 'edit-recipe' */ '../page/recipe/edit-recipe'))\nconst Function = asyncComponent(()=>import(/* webpackChunkName: 'function' */ '../page/function'))\nconst Resume = asyncComponent(()=>import(/* webpackChunkName: 'resume' */ '../page/resume'))\nconst ResumePreview = asyncComponent(()=>import(/* webpackChunkName: 'preview' */ '../page/resume/preview'))\n\ninterface Props{}\nconst HRouter:React.FC<Props>=(props)=>{\n    return (\n    <Router>\n          <Layout>\n           <Route path=\"/\" pathName=\"index\" name=\"index\" exact component={Index}></Route>\n            <Route path=\"/home\" component={Home}></Route>\n            <Route path=\"/uidoc\" component={Uidoc}></Route>\n            <Route path=\"/recipe\"  component={Recipe}></Route>\n            <Route path=\"/editRecipe\"  component={EditRecipe}></Route>\n            <Route path=\"/function\" component={Function}></Route>\n            <Route path=\"/resume\" exact component={Resume}></Route>\n            <Route path=\"/resume/preview\" component={ResumePreview}></Route>\n        </Layout>\n     </Router>\n    )\n}\n\nexport default HRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css'\nimport App from './App';\nimport HRouter from './router'\nimport * as serviceWorker from './serviceWorker';\nimport \"rockui/dist/index.css\";\nReactDOM.render(\n  // <React.StrictMode>\n    <HRouter />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}